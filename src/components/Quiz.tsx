
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import QuestionCard from "./QuestionCard";
import ProgressBar from "./ProgressBar";
import Results from "./Results";
import { ChevronLeft, ChevronRight, RotateCcw } from "lucide-react";

const quizData = [
  {
    id: 1,
    question: "What is an example of both a generative AI model and a discriminative AI model?",
    options: [
      "A generative AI model could be trained on a dataset of images of cats and then used to generate new images of cats. A discriminative AI model could be trained on a dataset of images of cats and dogs and then used to classify new images as either cats or dogs.",
      "A generative AI model could be trained on a dataset of images of cats and then used to classify new images of cats. A discriminative AI model could be trained on a dataset of images of cats and dogs and then used to predict new images as either cats or dogs.",
      "A generative AI model could be trained on a dataset of images of cats and dogs and then used to classify new images as either cats or dogs. A discriminative AI model could be trained on a dataset of images of cats and then used to generate new images of cats.",
      "A generative AI model could be trained on a dataset of images of cats and then used to cluster images of cats. A discriminative AI model could be trained on a dataset of images of cats and dogs and then used to predict as either cats or dogs."
    ],
    correctAnswer: 0
  },
  {
    id: 2,
    question: "What are foundation models in Generative AI?",
    options: [
      "A foundation model is used to create new types of software that can generate different types of content.",
      "A foundation model is used to improve the performance of other models by fine-tuning other models, which can help them to learn how to generate more accurate and realistic content.",
      "A foundation model is a large AI model pretrained on a vast quantity of data that was \"designed to be adapted\" (or fine-tuned) to a wide range of downstream tasks, such as sentiment analysis, image captioning, and object recognition.",
      "A foundation model is the first step in the generative AI process, responsible for creating the basic building blocks that are used to create more complex models."
    ],
    correctAnswer: 2
  },
  {
    id: 3,
    question: "What is a prompt?",
    options: [
      "A prompt is a short piece of text that is given to the large language model as input, and it can be used to control the output of the model in many ways.",
      "A prompt is a long piece of text that is used to debug the large language model.",
      "A prompt is a short piece of text that is used to train the large language model.",
      "A prompt is a pre-trained generative AI model that serves as a starting point for fine-tuning and customizing the generation of specific types of content."
    ],
    correctAnswer: 0
  },
  {
    id: 4,
    question: "What is Generative AI?",
    options: [
      "Generative AI is a type of artificial intelligence (AI) that can create new content which guarantees accuracy and truthfulness.",
      "Generative AI is a type of artificial intelligence (AI) that is designed to generate unbiased opinions in the content it produces.",
      "Generative AI is a type of artificial intelligence (AI) that can generate new and original ideas or solutions without being trained on existing data.",
      "Generative AI is a type of artificial intelligence (AI) that can create new content, such as text, images, audio, and video."
    ],
    correctAnswer: 3
  },
  {
    id: 5,
    question: "Hallucinations are words or phrases that are generated by the model that are often nonsensical or grammatically incorrect. What are some factors that can cause hallucinations? Select three options.",
    options: [
      "The model is trained on noisy or dirty data.",
      "The model is not trained on enough data",
      "The model is trained on too much data.",
      "The model is not given enough context."
    ],
    correctAnswer: [0, 1, 3], // Multiple correct answers
    isMultiple: true
  }
];

const Quiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<(number | number[])[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [isAnswered, setIsAnswered] = useState(false);

  const handleAnswer = (answer: number | number[]) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = answer;
    setSelectedAnswers(newAnswers);
    setIsAnswered(true);
  };

  const nextQuestion = () => {
    if (currentQuestion < quizData.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setIsAnswered(selectedAnswers[currentQuestion + 1] !== undefined);
    } else {
      setShowResults(true);
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setIsAnswered(selectedAnswers[currentQuestion - 1] !== undefined);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setShowResults(false);
    setIsAnswered(false);
  };

  const calculateScore = () => {
    let score = 0;
    quizData.forEach((question, index) => {
      const userAnswer = selectedAnswers[index];
      if (question.isMultiple) {
        const correctAnswers = question.correctAnswer as number[];
        const userAnswers = userAnswer as number[];
        if (userAnswers && Array.isArray(userAnswers) && 
            correctAnswers.length === userAnswers.length &&
            correctAnswers.every(ans => userAnswers.includes(ans))) {
          score++;
        }
      } else {
        if (userAnswer === question.correctAnswer) {
          score++;
        }
      }
    });
    return score;
  };

  if (showResults) {
    return (
      <Results 
        score={calculateScore()} 
        totalQuestions={quizData.length} 
        onRestart={resetQuiz}
        questions={quizData}
        userAnswers={selectedAnswers}
      />
    );
  }

  return (
    <div className="max-w-4xl mx-auto">
      <ProgressBar current={currentQuestion + 1} total={quizData.length} />
      
      <Card className="p-8 mt-6 shadow-lg border-0 bg-white/70 backdrop-blur-sm">
        <QuestionCard
          question={quizData[currentQuestion]}
          selectedAnswer={selectedAnswers[currentQuestion]}
          onAnswer={handleAnswer}
        />
        
        <div className="flex justify-between items-center mt-8">
          <Button
            onClick={prevQuestion}
            disabled={currentQuestion === 0}
            variant="outline"
            className="flex items-center gap-2"
          >
            <ChevronLeft className="w-4 h-4" />
            Previous
          </Button>
          
          <div className="flex gap-4">
            <Button
              onClick={resetQuiz}
              variant="outline"
              className="flex items-center gap-2"
            >
              <RotateCcw className="w-4 h-4" />
              Reset
            </Button>
            
            <Button
              onClick={nextQuestion}
              disabled={!isAnswered}
              className="flex items-center gap-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
            >
              {currentQuestion === quizData.length - 1 ? "Finish" : "Next"}
              <ChevronRight className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default Quiz;
